{"version":3,"sources":["webpack:///webpack/bootstrap 5b8b575483d44baf2f95","webpack:///./background/background.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAO,SAAP,CAAiB,SAAjB,CAA2B,WAA3B,CAAuC,UAAU,IAAV,EAAgB;;AAErD,OAAI,oBAAoB,SAApB,iBAAoB,CAAU,OAAV,EAAmB,MAAnB,EAA2B,YAA3B,EAAyC;;AAE/D,SAAG,QAAQ,KAAR,IAAiB,QAAQ,OAA5B,EAAqC;;AAEnC,WAAI,QAAQ,MAAR,KAAmB,SAAvB,EAAkC;AAChC,iBAAQ,GAAR,CAAY,SAAZ,EAAuB,QAAQ,OAA/B;AACA;AACD;;AAED;AACA,WAAG,QAAQ,MAAR,KAAmB,MAAtB,EAA8B;AAC5B,gBAAO,IAAP,CAAY,aAAZ,CAA0B,QAAQ,KAAlC,EAAyC,EAAC,MAAM,QAAQ,OAAf,EAAzC;;AAEA;AACD,QAJD,MAIO,IAAG,QAAQ,MAAR,KAAmB,QAAtB,EAAgC;AACrC,gBAAO,IAAP,CAAY,aAAZ,CAA0B,QAAQ,KAAlC,EAAyC,EAAC,MAAM,QAAQ,OAAf,EAAzC;;AAEA;AACD,QAJM,MAIA;AACL,gBAAO,IAAP,CAAY,WAAZ,CAAwB,QAAQ,KAAhC,EAAuC,OAAvC,EAAgD,YAAhD;AACD;;AAED;AACA;AACD,MAtBD,MAsBO;AACL;AACA;AACA,YAAK,WAAL,CAAiB,OAAjB;AACD;;AAED,kBAAa,OAAb;AACD,IA/BD;;AAiCA;AACA,UAAO,SAAP,CAAiB,SAAjB,CAA2B,WAA3B,CAAuC,iBAAvC;;AAEA,QAAK,YAAL,CAAkB,WAAlB,CAA8B,UAAS,IAAT,EAAe;AAC3C,YAAO,SAAP,CAAiB,SAAjB,CAA2B,cAA3B,CAA0C,iBAA1C;AACD,IAFD;;AAIA,QAAK,SAAL,CAAe,WAAf,CAA2B,UAAU,OAAV,EAAmB;AAC5C,UAAK,WAAL,CAAiB,OAAjB;AACD,IAFD;AAID,EA9CD;;AAgDA,KAAI,cAAc,EAAlB;;AAEA,QAAO,OAAP,CAAe,SAAf,CAAyB,WAAzB,CAAqC,UAAS,OAAT,EAAkB,MAAlB,EAA0B,YAA1B,EAAwC;AAC3E;AACA,OAAI,OAAO,GAAX,EAAgB;AACd,SAAI,QAAQ,OAAO,GAAP,CAAW,EAAvB;AACA,SAAI,SAAS,WAAb,EAA0B;AACxB,mBAAY,KAAZ,EAAmB,WAAnB,CAA+B,OAA/B;AACD,MAFD,MAEO;AACL,eAAQ,GAAR,CAAY,mCAAZ;AACD;AACF,IAPD,MAOO;AACL,aAAQ,GAAR,CAAY,yBAAZ;AACD;AACD,UAAO,IAAP;AACD,EAbD,E","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5b8b575483d44baf2f95\n **/","// Chrome automatically creates a background.html page for this to execute.\n// This can access the inspected page via executeScript\n// \n// Can use:\n// chrome.tabs.*\n// chrome.extension.*\n\nchrome.extension.onConnect.addListener(function (port) {\n\n  var extensionListener = function (message, sender, sendResponse) {\n\n    if(message.tabId && message.content) {\n\n      if (message.action === 'message') {\n        console.log('message', message.content);\n        return;\n      }\n\n      //Evaluate script in inspectedPage\n      if(message.action === 'code') {\n        chrome.tabs.executeScript(message.tabId, {code: message.content});\n\n        //Attach script to inspectedPage\n      } else if(message.action === 'script') {\n        chrome.tabs.executeScript(message.tabId, {file: message.content});\n\n        //Pass message to inspectedPage\n      } else {\n        chrome.tabs.sendMessage(message.tabId, message, sendResponse);\n      }\n\n      // This accepts messages from the inspectedPage and \n      // sends them to the panel\n    } else {\n      // The Vision data sent from injected code back\n      // to backgroun page\n      port.postMessage(message);\n    }\n\n    sendResponse(message);\n  }\n\n  // Listens to messages sent from the panel\n  chrome.extension.onMessage.addListener(extensionListener);\n\n  port.onDisconnect.addListener(function(port) {\n    chrome.extension.onMessage.removeListener(extensionListener);\n  });\n\n  port.onMessage.addListener(function (message) {\n    port.postMessage(message);\n  });\n\n});\n\nvar connections = {};\n\nchrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n  // Messages from content scripts should have sender.tab set\n  if (sender.tab) {\n    var tabId = sender.tab.id;\n    if (tabId in connections) {\n      connections[tabId].postMessage(request);\n    } else {\n      console.log(\"Tab not found in connection list.\");\n    }\n  } else {\n    console.log(\"sender.tab not defined.\");\n  }\n  return true;\n});\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./background/background.js\n **/"],"sourceRoot":""}